{"version":3,"sources":["constants.js","api/api.js","features/views/TableView.js","utils.js","features/views/Pagination.js","features/views/LoadingView.js","features/views/ErrorView.js","features/BitcoinHistory/index.js","features/BitcoinHistory/BitcoinHistory.js","App.js","serviceWorker.js","index.js"],"names":["HEADER_LABELS","request","method","data","a","axios","url","timeout","fetchBitcoinData","bitcoinData","TableView","className","map","key","index","toUpperCase","item","time","high","low","open","volumefrom","volumeto","close","Date","toLocaleTimeString","Pagination","itemsPerPage","totalItems","paginate","paginateNext","paginatePrev","currentPage","href","type","onClick","pageNumbers","i","Math","ceil","push","getPageNumbers","number","LoadingView","ErrorView","customMessage","BitcoinHistory","useState","isLoading","setIsLoading","hasErrors","setErrors","hasWarning","setWarning","setBitcoinData","setTotalItems","setCurrentPage","maxPage","setMaxPage","useEffect","then","response","dataSize","Data","length","HasWarning","catch","error","console","log","indexOfLast","indexOfFirst","currentData","slice","pageNumber","min","max","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.70345b19.chunk.js","sourcesContent":["export const API_BASE_URL = \" https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=100&api_key=8ae55d463e1bf8d38b4a502ca47512f9b1dec21533ad9af7acb993e8ba952bc2\"\n\nexport const HEADER_LABELS = [\n    \"time\",\n    \"high\",\n    \"low\",\n    \"open\",\n    \"volume from\",\n    \"volume to\", \n    \"close\"\n]; \n\nexport const MAX_ITEMS_PER_PAGE = 20; ","\nimport axios from 'axios'; \nimport { API_BASE_URL } from '../constants';\n\nconst request = async (method, data) => {\n    return axios({\n        url: API_BASE_URL,\n        timeout: 5000, \n        method,\n        data\n    })\n}; \n\nexport const fetchBitcoinData = async () => {\n    const bitcoinData = await request(\"get\"); \n    return bitcoinData.data\n}","import React from 'react'\nimport { parseUnixTimestamp } from '../../utils';\nimport { HEADER_LABELS } from '../../constants';\nimport '../../assets/styles/main.scss'; \n\nexport const TableView = ({ data }) => {\n\n    const renderTableHeader = () => {\n        let header = HEADER_LABELS; \n        return header.map((key, index) => {\n            return <th key={index}>\n                {key.toUpperCase()}\n            </th>\n        }); \n    }\n\n\n    const renderTableData = (tableData) => {\n        return tableData.map((item, index) => {\n            const { time, high, low, open, volumefrom, volumeto, close } = item; \n            return (\n                <tr key={index}>\n                    <td>{parseUnixTimestamp(time)}</td>\n                    <td>{high}</td>\n                    <td>{low}</td>\n                    <td>{open}</td>\n                    <td>{volumefrom}</td>\n                    <td>{volumeto}</td>\n                    <td>{close}</td>\n                </tr>\n            )\n        });\n    }\n\n    return (\n        <div className=\"center large overflow-auto\">\n             <h1 className=\"secodary-color\">Bitcoin History</h1>\n            <table >\n                <tbody>\n                    <tr>{renderTableHeader()}</tr>\n                    {renderTableData(data)}\n                </tbody>\n            </table>\n        </div>\n    ); \n}\n\nexport default TableView; ","\n\nexport const parseUnixTimestamp = (timestamp) => {\n    return new Date(timestamp).toLocaleTimeString('no-NB')\n}\n\n/**\n * Pagination\n */","import React from 'react'; \nimport '../../assets/styles/main.scss'; \n\nexport const Pagination = ({ \n    itemsPerPage, \n    totalItems, \n    paginate, \n    paginateNext, \n    paginatePrev,\n    currentPage\n }) => {\n\n    const getPageNumbers = () => {\n        const pageNumbers = []; \n        for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\n            pageNumbers.push(i); \n        }\n        return pageNumbers; \n    }\n\n    return (\n        <nav className=\"center large\">\n            <button className=\"medium small-mg\" href=\"!#\" type=\"button\" onClick={paginatePrev}>\n                Prev\n            </button>\n            <div className=\"pagination hide-mobile\">\n                {getPageNumbers().map(number => (\n                    <a key={number} \n                        href=\"!#\" \n                        className={(currentPage === number ? 'active' : '')}\n                        onClick={() => paginate(number)} >\n                        {number}\n                    </a>\n                ))}\n            </div>\n            <button className=\"medium small-mg\" href=\"!#\" type=\"button\" onClick={paginateNext}>\n                Next\n            </button>\n        </nav>\n    );\n};","import React from 'react'; \nimport '../../assets/styles/main.scss'; \n\nexport const LoadingView = () => {\n    return (\n        <div className=\"full-container flex-center\">\n            <h1 className=\"accent-color\">Loading...</h1>\n        </div>\n    ); \n}; \n\nexport default LoadingView; ","import React from 'react';\nimport '../../assets/styles/main.scss';\n\nexport const ErrorView = ({ customMessage }) => {\n    return (\n        <div className=\"full-container flex-center\">\n            {customMessage ? customMessage : <h1 className=\"primary-color\">An error occured :/</h1> }\n        </div>\n    ); \n}; \n\nexport default ErrorView; ","import BitcoinHistory from './BitcoinHistory'; \nexport default BitcoinHistory;\n","import React, { useEffect, useState } from 'react';\nimport { fetchBitcoinData } from '../../api';\nimport TableView from '../views/TableView';\nimport { MAX_ITEMS_PER_PAGE } from '../../constants';\nimport { Pagination } from '../views/Pagination';\nimport { LoadingView } from '../views/LoadingView';\nimport ErrorView from '../views/ErrorView';\nimport '../../assets/styles/main.scss'; \n\n export const BitcoinHistory = () => {\n\n    const [isLoading, setIsLoading] = useState(true); \n    const [hasErrors, setErrors] = useState(false); \n    const [hasWarning, setWarning] = useState(false); \n    const [bitcoinData, setBitcoinData] = useState([]);\n    const [totalItems, setTotalItems] = useState(0); \n    \n    // Pagination Hooks\n    const [currentPage, setCurrentPage] = useState(1); \n    const [maxPage, setMaxPage] = useState(0);  \n    \n    const itemsPerPage = MAX_ITEMS_PER_PAGE;\n\n    useEffect(() => {\n        fetchBitcoinData()\n            .then((response) => {\n                const dataSize = response.Data.Data.length; \n                setBitcoinData(response.Data.Data);\n                setTotalItems(dataSize);\n                setMaxPage(Math.ceil(dataSize / itemsPerPage));\n                setIsLoading(false); \n                setWarning(response.Data.HasWarning); \n            })\n            .catch(error => {\n                setErrors(true); \n                console.log(error);\n            })\n\n        }, [itemsPerPage]); \n\n    const indexOfLast = currentPage * itemsPerPage; \n    const indexOfFirst = indexOfLast - itemsPerPage; \n    const currentData = bitcoinData.slice(indexOfFirst, indexOfLast);\n\n    const paginate = (pageNumber) => {\n        return setCurrentPage(pageNumber);\n    };\n\n    const paginateNext = () => {\n        const pageNumber =  Math.min(currentPage + 1, maxPage);\n        return paginate(pageNumber); \n    }; \n\n    const paginatePrevious = () => {\n        const pageNumber = Math.max(currentPage - 1, 1); \n        return paginate(pageNumber); \n    }; \n\n    if (isLoading) { return <LoadingView/> }; \n\n    if (hasErrors) { return <ErrorView/>  }; \n\n    return (\n        <section>\n            <div>\n                {hasWarning ? <p className=\"large warning\">**A warning occured!</p> : \"\" }\n                <TableView data={currentData}/>\n                <Pagination\n                    itemsPerPage={itemsPerPage}\n                    totalItems={totalItems}\n                    paginate={paginate}\n                    paginateNext={paginateNext}\n                    paginatePrev={paginatePrevious}\n                    currentPage={currentPage}\n                />  \n            </div>\n        </section>\n    )\n};\n\nexport default BitcoinHistory; ","import React from 'react';\nimport './App.scss';\nimport '../src/assets/styles/main.scss';\nimport BitcoinHistory from './features/BitcoinHistory';\n\nfunction App() {\n  return (\n    <div className=\"full-container\">\n      <header className=\"app__header\">Aboveit Hjemmeoppgave</header>\n      <BitcoinHistory></BitcoinHistory>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}